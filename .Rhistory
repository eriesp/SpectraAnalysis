emis.x
length(emis.x)
dim(emis.der1)
emis.der.l2norm
matplot(emis.x,emis.der1[,c(1,44)], type = 'l')
par(mfrow=c(1,1))
matplot(emis.x,emis.der1[,c(1,44)], type = 'l')
plot(emis.der.l2norm,tupe='l')
dummy.emis
seq(1,6)
seq(25,29)
mean.line.150 = rowMeans(emis[,c(seq(1,6), seq(25,29))])
mean.line.300 = rowMeans(emis[,c(seq(7,12), seq(30,34))])
mean.line.450 = rowMeans(emis[,c(seq(13,18), seq(35,39))])
mean.line.600 = rowMeans(emis[,c(seq(19,24), seq(40,44))])
emis
dim(emis)
dim(emis.smooth)
matplot(emis.x,emis,type='l')
matplot(1:dim(emis)[1],emis,type='l')
mean.line.150 = rowMeans(emis.der1[,c(seq(1,6), seq(25,29))])
mean.line.300 = rowMeans(emis.der1[,c(seq(7,12), seq(30,34))])
mean.line.450 = rowMeans(emis.der1[,c(seq(13,18), seq(35,39))])
mean.line.600 = rowMeans(emis.der1[,c(seq(19,24), seq(40,44))])
x11()
matplot(emis.x, mean.line.150, type='l', col='blue')
matlines(emis.x, mean.line.300, type='l', col='green')
matlines(emis.x, mean.line.450, type='l', col='gold')
matlines(emis.x, mean.line.600, type='l', col='red')
x11()
matplot(emis.x, mean.line.150, type='l', col='blue', ylim = c(0,0.1))
matlines(emis.x, mean.line.300, type='l', col='green')
matlines(emis.x, mean.line.450, type='l', col='gold')
matlines(emis.x, mean.line.600, type='l', col='red')
x11()
matplot(emis.x, mean.line.150, type='l', col='blue', ylim = c(-0.1,0.1))
matlines(emis.x, mean.line.300, type='l', col='green')
matlines(emis.x, mean.line.450, type='l', col='gold')
matlines(emis.x, mean.line.600, type='l', col='red')
#150 vs 300
test1=IWT2(t(data.matrix(emis.der1[seq(1,713,10),c(seq(1,6), seq(25,29))])),
t(data.matrix(emis.der1[seq(1,713,10),c(seq(7,12), seq(30,34))])))
# vedo se vi Ã¨ differenza della derivata tra una temperatura e l'altra (?)
library(fdatest)
#150 vs 300
test1=IWT2(t(data.matrix(emis.der1[seq(1,713,10),c(seq(1,6), seq(25,29))])),
t(data.matrix(emis.der1[seq(1,713,10),c(seq(7,12), seq(30,34))])))
#150 vs 300
test1=IWT2(t(data.matrix(emis.der1[seq(1,713,10),c(seq(1,6), seq(25,29))])),
t(data.matrix(emis.der1[seq(1,713,10),c(seq(7,12), seq(30,34))])))
#150 vs 300
test1=IWT2(t(data.matrix(emis.der1[seq(1,417,10),c(seq(1,6), seq(25,29))])),
t(data.matrix(emis.der1[seq(1,417,10),c(seq(7,12), seq(30,34))])))
x11()
par(mfrow=c(1,2))
plot(test1)
test2=IWT2(t(data.matrix(emis.der1[seq(1,417,10),c(seq(1,6), seq(25,29))])),
t(data.matrix(emis.der1[seq(1,417,10),c(seq(13,18), seq(35,39))])))
x11()
par(mfrow=c(1,2))
plot(test2)
test3=IWT2(t(data.matrix(emis.der1[seq(1,417,10),c(seq(1,6), seq(25,29))])),
t(data.matrix(emis.der1[seq(1,417,10),c(seq(19,24), seq(40,44))])))
x11()
par(mfrow=c(1,2))
plot(test3)
#300 vs 600
test3bis=IWT2(t(data.matrix(emis.der1[seq(1,417,10),c(seq(7,12), seq(30,34))])),
t(data.matrix(emis.der1[seq(1,417,10),c(seq(19,24), seq(40,44))])))
x11()
par(mfrow=c(1,2))
plot(test3bis)
test3tris=IWT2(t(data.matrix(emis.der1[seq(1,417,10),c(seq(13,18), seq(35,39))])),
t(data.matrix(emis.der1[seq(1,417,10),c(seq(19,24), seq(40,44))])))
x11()
par(mfrow=c(1,2))
plot(test3tris)
find_knots <- function(n,assex){
nodes1 <- seq(from = assex[1], to = assex[334],length.out = n*3/4)
nodes2 <- seq(from = assex[334], to = assex[length(assex)], length.out = n*1/4)
nodes2 <- nodes2[2:length(nodes2)]
return(c(nodes1,nodes2))
}
m = 5
nknots <- 6:50
gcv <- numeric(length(nknots))
for (i in 1:length(nknots)){
nodi <- find_knots(n = nknots[i], assex = refl.x)
basis <- create.bspline.basis(c(refl.x[1],refl.x[length(refl.x)]), breaks = nodi, norder = m)
gcv[i] <- smooth.basis(refl.x, as.matrix(data_refl), basis)$gcv
}
par(mfrow=c(1,1))
plot(nknots,gcv)
nknots[which.min(gcv)]
n.opt.knots=24
nodi <- find_knots(n = n.opt.knots, assex = refl.x)
basis <- create.bspline.basis(c(refl.x[1],refl.x[length(refl.x)]), breaks = nodi, norder = m)
basismat <- smooth.basis(argvals=refl.x, y=as.matrix(data_refl), fdParobj=basis)
refl.smooth <- eval.fd(refl.x, basismat$fd)
ref.der1 <- eval.fd(refl.x, basismat$fd, Lfd=1)
# second derivative
ref.der2 <- eval.fd(refl.x, basismat$fd, Lfd=2)
x11()
par(mfrow=c(2,2))
matplot(refl.x,data_refl,xlab="t",ylab="observed data", type='l')
matplot(refl.x,refl.smooth ,type="l",lwd=1)
matplot(refl.x,refl.der1 ,type="l",lwd=1)
matplot(refl.x,refl.der2 ,type="l",lwd=1)
# first derivative
ref.der1 <- eval.fd(refl.x, basismat$fd, Lfd=1)
# second derivative
ref.der2 <- eval.fd(refl.x, basismat$fd, Lfd=2)
x11()
par(mfrow=c(2,2))
matplot(refl.x,data_refl,xlab="t",ylab="observed data", type='l')
matplot(refl.x,refl.smooth ,type="l",lwd=1)
matplot(refl.x,refl.der1 ,type="l",lwd=1)
matplot(refl.x,refl.der2 ,type="l",lwd=1)
# first derivative
refl.der1 <- eval.fd(refl.x, basismat$fd, Lfd=1)
# second derivative
refl.der2 <- eval.fd(refl.x, basismat$fd, Lfd=2)
x11()
par(mfrow=c(2,2))
matplot(refl.x,data_refl,xlab="t",ylab="observed data", type='l')
matplot(refl.x,refl.smooth ,type="l",lwd=1)
matplot(refl.x,refl.der1 ,type="l",lwd=1)
matplot(refl.x,refl.der2 ,type="l",lwd=1)
refl.der.l2norm = numeric(44)
for (i in 1:44){
refl.der.l2norm[i] = norm(refl.der1[i,], type = '2')
}
par(mfrow=c(1,1))
matplot(refl.x,refl.der1[,c(1,44)], type = 'l')
plot(refl.der.l2norm,tupe='l')
refl.der.l2norm = numeric(22)
for (i in 1:4224){
refl.der.l2norm[i] = norm(refl.der1[i,], type = '2')
}
par(mfrow=c(1,1))
matplot(refl.x,refl.der1[,c(1,22)], type = 'l')
plot(refl.der.l2norm,tupe='l')
dim(refl)
dim(data_refl)
n.refl = dim(data_refl)[2]
refl.der.l2norm = numeric(n.refl)
for (i in 1:n.refl){
refl.der.l2norm[i] = norm(refl.der1[i,], type = '2')
}
par(mfrow=c(1,1))
matplot(refl.x,refl.der1[,c(1,n.refl)], type = 'l')
plot(refl.der.l2norm,tupe='l')
plot(refl.der.l2norm,type='l')
refl.der.l2norm
x11()
par(mfrow=c(2,2))
matplot(refl.x,data_refl,xlab="t",ylab="observed data", type='l')
matplot(refl.x,refl.smooth ,type="l",lwd=1)
matplot(refl.x,refl.der1 ,type="l",lwd=1)
matplot(refl.x,refl.der2 ,type="l",lwd=1)
plot(refl.der.l2norm)
## l2 norm delle derivate dei segnali di riflettanza
perm=sample(1:22)
perm
refl.der.l2norm = numeric(n.refl)
for (i in perm){
refl.der.l2norm[i] = norm(refl.der1[i,], type = '2')
}
par(mfrow=c(1,1))
matplot(refl.x,refl.der1[,c(1,n.refl)], type = 'l')
plot(refl.der.l2norm)
new_der1 = refl.der1[perm,]
new_der1 = refl.der1[perm,]
for (i in 1:n.refl){
refl.der.l2norm[i] = norm(new_der1[i,], type = '2')
}
par(mfrow=c(1,1))
matplot(refl.x,refl.der1[,c(1,new_der1)], type = 'l')
plot(refl.der.l2norm)
dummy.refl
silica.emis
length(silica.emis)
length(silica.refl)
plot(refl.der.l2norm, silica.refl)
graphics.off()
plot(refl.der.l2norm, silica.refl)
refl.der.l2norm = numeric(n.refl)
for (i in 1:n.refl){
refl.der.l2norm[i] = norm(refl.der1[i,], type = '2')
}
par(mfrow=c(1,1))
matplot(refl.x,refl.der1[,c(1,n.refl)], type = 'l')
plot(refl.der.l2norm)
plot(refl.der.l2norm, silica.refl)
n.refl = dim(data_refl)[2]
refl.der.l2norm = numeric(n.refl)
for (i in 1:n.refl){
refl.der.l2norm[i] = norm(refl.der1[i,], type = '2')
}
# par(mfrow=c(1,1))
# matplot(refl.x,refl.der1[,c(1,n.refl)], type = 'l')
plot(refl.der.l2norm)
temp.refl
scatterplotMatrix(data.frame(silica.refl,refl.CF,refl.CFval,refl.TF,refl.TFval,refl.der.l2norm))
refl.TF^2
silica.refl.gam = gam(silica.refl ~ refl.CF + s(refl.TFval, bs='cr') + refl.TF +
I(refl.TF^2) + s(refl.der.l2norm, bs = 'cr'))
summary(silica.refl.gam)
silica.refl.gam.reduced = gam(silica.refl ~ refl.CF + s(refl.TFval, bs='cr') + s(refl.der.l2norm, bs = 'cr'))
summary(silica.refl.gam.reduced)
hist(silica.refl.gam.reduced$residuals)
qqnorm(silica.refl.gam.reduced$residuals)
shapiro.test(silica.refl.gam.reduced$residuals)
silica.refl.gam.reduced = gam(silica.refl ~ refl.CF + refl.TFval + s(refl.der.l2norm, bs = 'cr'))
summary(silica.refl.gam.reduced)
hist(silica.refl.gam.reduced$residuals)
qqnorm(silica.refl.gam.reduced$residuals)
shapiro.test(silica.refl.gam.reduced$residuals)
plot(silica.refl.gam.reduced)
silica.refl.gam.reduced = gam(silica.refl ~ refl.CF + refl.TFval )
summary(silica.refl.gam.reduced)
silica.refl.gam.reduced = gam(silica.refl ~ refl.CF + s(refl.TFval, bs = 'cr') )
summary(silica.refl.gam.reduced)
silica.refl.gam.reduced = gam(silica.refl ~ refl.CF + s(refl.TFval, bs = 'cr') )
summary(silica.refl.gam.reduced)
hist(silica.refl.gam.reduced$residuals)
qqnorm(silica.refl.gam.reduced$residuals)
shapiro.test(silica.refl.gam.reduced$residuals)
silica.refl.gam.reduced = gam(silica.refl ~ refl.CF + refl.TFval + s(refl.der.l2norm, bs = 'cr') )
summary(silica.refl.gam.reduced)
hist(silica.refl.gam.reduced$residuals)
qqnorm(silica.refl.gam.reduced$residuals)
shapiro.test(silica.refl.gam.reduced$residuals)
temp.refl
dummy.refl
scatterplotMatrix(data.frame(alcali.refl,refl.CF,refl.CFval,refl.TF,refl.TFval,refl.der.l2norm,temp.refl))
alcali.refl.gam = gam(alcali.refl ~ s(refl.CF, bs='cr') + s(refl.TFval, bs='cr'))
summary(alcali.refl.gam)
hist(alcali.refl.gam$residuals)
qqnorm(alcali.refl.gam$residuals)
shapiro.test(alcali.refl.gam$residuals)
alcali.refl.gam = gam(alcali.refl ~ s(refl.CF, bs='cr') + s(refl.TFval, bs='cr') +  s(refl.der.l2norm, bs = 'cr'))
alcali.refl.gam = gam(alcali.refl ~ refl.CF + s(refl.TFval, bs='cr') +  s(refl.der.l2norm, bs = 'cr'))
summary(alcali.refl.gam)
hist(alcali.refl.gam$residuals)
qqnorm(alcali.refl.gam$residuals)
shapiro.test(alcali.refl.gam$residuals)
### reduced model
silica.emis.gam.reduced = gam(silica.emis ~ emis.CF + s(emis.CFval, bs='cr') +
s(emis.TF, bs='cr') +s(emis.TFval, bs='cr'))
summary(silica.emis.gam.reduced)
alcali.refl.gam = gam(alcali.refl ~ s(refl.CF, bs='cr') + s(refl.TFval, bs='cr'))
summary(alcali.refl.gam)
hist(alcali.refl.gam$residuals)
qqnorm(alcali.refl.gam$residuals)
shapiro.test(alcali.refl.gam$residuals)
alcali.refl.gam = gam(alcali.refl ~ refl.CF + s(refl.TFval, bs='cr') +  s(refl.der.l2norm, bs = 'cr'))
summary(alcali.refl.gam)
plot(refl.der.l2norm, silica.emis)
silica.emis
plot(refl.der.l2norm, silica.refl)
plot(refl.der.l2norm, alcali.refl)
plot(emis.der.l2norm, silica.emis)
silica.emis=c(silica.srp.emis, silica.vul.emis)
silica.srp.refl = c(72.28, 72.28, 67.47, 67.47, 62.64, 62.64, 57.07, 57.07, 53.03, 53.03, 48.03, 48.03)
silica.emis=c(silica.srp.emis, silica.vul.emis)
silica.refl=c(silica.srp.refl, silica.vul.refl)
silica.srp = c(72.28, 67.47, 62.64, 57.07, 53.03, 48.03)
silica.vul = c(53.33, 59.66, 64.08, 67.96, 73.96)
silica.srp.emis = rep(silica.srp,4)
silica.vul.emis = rep(silica.vul,4)
silica.emis=c(silica.srp.emis, silica.vul.emis)
alcali.srp = c(7.51, 6.62, 5.72, 4.78, 3.72, 2.71)
alcali.vul = c(8.12, 8.40, 8.47, 8.45, 8.75)
alcali.srp.emis = rep(alcali.srp,4)
alcali.vul.emis = rep(alcali.vul,4)
alcali.srp.refl = c(7.51, 7.51, 6.62, 6.62, 5.72, 5.72, 4.78, 4.78, 3.72, 3.72, 2.71, 2.71)
alcali.vul.refl = c(8.12, 8.12, 8.40, 8.40, 8.47, 8.47, 8.45, 8.45, 8.75, 8.75)
alcali.emis=c(alcali.srp.emis, alcali.vul.emis)
alcali.refl=c(alcali.srp.refl, alcali.vul.refl)
plot(emis.der.l2norm, silica.emis)
plot(emis.der.l2norm, alcali.emis)
scatterplotMatrix(data.frame(silica.emis,emis.CF,emis.CFval,emis.TF,emis.TFval,emis.der.l2norm))
vul.refl.CF=numeric(10)
vul.refl.CFval=numeric(10)
vul.refl.TF=numeric(10)
vul.refl.TFval=numeric(10)
vul.refl.last=numeric(10)
for(i in 1:10) {
vul.refl.CF[i]=which.max(unlist(vul.refl[213:518,i])) + 213
vul.refl.CFval[i]=vul.refl[vul.refl.CF[i],i]
vul.refl.CF[i]=refl.x[vul.refl.CF[i]]
vul.refl.TF[i]=which.min(unlist(vul.refl[413:550,i])) + 413
vul.refl.TFval[i]=vul.refl[vul.refl.TF[i],i]
vul.refl.TF[i]=refl.x[vul.refl.TF[i]]
vul.refl.last[i]=vul.refl[714,i]
}
srp.refl.CF=numeric(12)
srp.refl.CFval=numeric(12)
srp.refl.TF=numeric(12)
srp.refl.TFval=numeric(12)
srp.refl.last=numeric(12)
for(i in 1:12) {
srp.refl.CF[i]=which.max(unlist(srp.refl[213:518,i])) + 213
srp.refl.CFval[i]=srp.refl[srp.refl.CF[i],i]
srp.refl.CF[i]=refl.x[srp.refl.CF[i]]
srp.refl.TF[i]=which.min(unlist(srp.refl[413:550,i])) + 413
srp.refl.TFval[i]=srp.refl[srp.refl.TF[i],i]
srp.refl.TF[i]=refl.x[srp.refl.TF[i]]
srp.refl.last[i]=srp.refl[714,i]
}
refl.CF=numeric(22)
refl.CFval=numeric(22)
refl.TF=numeric(22)
refl.TFval=numeric(22)
refl.last=numeric(22)
for(i in 1:22) {
refl.CF[i]=which.max(unlist(refl[213:518,i])) + 213
refl.CFval[i]=refl[refl.CF[i],i]
refl.CF[i]=refl.x[refl.CF[i]]
refl.TF[i]=which.min(unlist(refl[413:550,i])) + 413
refl.TFval[i]=refl[refl.TF[i],i]
refl.TF[i]=refl.x[refl.TF[i]]
refl.last[i]=refl[714,i]
}
vul.emis.CF=numeric(20)
vul.emis.CFval=numeric(20)
vul.emis.TF=numeric(20)
vul.emis.TFval=numeric(20)
vul.emis.last=numeric(20)
for(i in 1:20) {
vul.emis.CF[i]=which.max(unlist(vul.emis[213:518,i])) + 213
vul.emis.CFval[i]=vul.emis[vul.emis.CF[i],i]
vul.emis.CF[i]=emis.x[vul.emis.CF[i]]
vul.emis.TF[i]=which.min(unlist(vul.emis[413:523,i])) + 413
vul.emis.TFval[i]=vul.emis[vul.emis.TF[i],i]
vul.emis.TF[i]=emis.x[vul.emis.TF[i]]
vul.emis.last[i]=vul.emis[713,i]
}
emis.CF=numeric(44)
emis.CFval=numeric(44)
emis.TF=numeric(44)
emis.TFval=numeric(44)
emis.last=numeric(44)
for(i in 1:44) {
emis.CF[i]=which.max(unlist(emis[213:518,i])) + 213
emis.CFval[i]=emis[emis.CF[i],i]
emis.CF[i]=emis.x[emis.CF[i]]
emis.TF[i]=which.min(unlist(emis[413:523,i])) + 413
emis.TFval[i]=emis[emis.TF[i],i]
emis.TF[i]=emis.x[emis.TF[i]]
emis.last[i]=emis[713,i]
}
srp.emis.CF=numeric(24)
srp.emis.CFval=numeric(24)
srp.emis.TF=numeric(24)
srp.emis.TFval=numeric(24)
srp.emis.last=numeric(24)
for(i in 1:24) {
srp.emis.CF[i]=which.max(unlist(srp.emis[213:518,i])) + 213
srp.emis.CFval[i]=srp.emis[srp.emis.CF[i],i]
srp.emis.CF[i]=emis.x[srp.emis.CF[i]]
srp.emis.TF[i]=which.min(unlist(srp.emis[413:523,i])) + 413
srp.emis.TFval[i]=srp.emis[srp.emis.TF[i],i]
srp.emis.TF[i]=emis.x[srp.emis.TF[i]]
srp.emis.last[i]=srp.emis[713,i]
}
emis.CF[i]=emis.x[emis.CF[i]]
emis.CF
length(emis.CF)
emis.CF[i]
emis.x[emis.CF[i]]
which.max(unlist(emis[213:518,i])) + 213
emis.CF[i]
which.max(unlist(emis[213:518,i])) + 213
emis.CF[i]=which.max(unlist(emis[213:518,i])) + 213
emis.CFval[i]=emis[emis.CF[i],i]
emis.CF[i]=emis.x[emis.CF[i]]
emis.CF=numeric(44)
emis.CFval=numeric(44)
emis.TF=numeric(44)
emis.TFval=numeric(44)
emis.last=numeric(44)
for(i in 1:44) {
emis.CF[i]=which.max(unlist(emis[213:518,i])) + 213
emis.CFval[i]=emis[emis.CF[i],i]
emis.CF[i]=emis.x[emis.CF[i]]
emis.TF[i]=which.min(unlist(emis[413:523,i])) + 413
emis.TFval[i]=emis[emis.TF[i],i]
emis.TF[i]=emis.x[emis.TF[i]]
emis.last[i]=emis[713,i]
}
emis
dim(emis)
which.max(unlist(emis[213:518,i])) + 213
unlist(emis[213:518,i])
emis[213:518,i]
dim(emis)
i
srp.emis=srp[713:1,-1]
srp.refl=srp2[, -1]
vul.emis=vul[713:1,-1]
vul.refl=vul2[,-1]
emis=cbind(srp.emis,vul.emis)
dim(emis)
emis.CF=numeric(44)
emis.CFval=numeric(44)
emis.TF=numeric(44)
emis.TFval=numeric(44)
emis.last=numeric(44)
for(i in 1:44) {
emis.CF[i]=which.max(unlist(emis[213:518,i])) + 213
emis.CFval[i]=emis[emis.CF[i],i]
emis.CF[i]=emis.x[emis.CF[i]]
emis.TF[i]=which.min(unlist(emis[413:523,i])) + 413
emis.TFval[i]=emis[emis.TF[i],i]
emis.TF[i]=emis.x[emis.TF[i]]
emis.last[i]=emis[713,i]
}
srp.emis.CF=numeric(24)
srp.emis.CFval=numeric(24)
srp.emis.TF=numeric(24)
srp.emis.TFval=numeric(24)
srp.emis.last=numeric(24)
for(i in 1:24) {
srp.emis.CF[i]=which.max(unlist(srp.emis[213:518,i])) + 213
srp.emis.CFval[i]=srp.emis[srp.emis.CF[i],i]
srp.emis.CF[i]=emis.x[srp.emis.CF[i]]
srp.emis.TF[i]=which.min(unlist(srp.emis[413:523,i])) + 413
srp.emis.TFval[i]=srp.emis[srp.emis.TF[i],i]
srp.emis.TF[i]=emis.x[srp.emis.TF[i]]
srp.emis.last[i]=srp.emis[713,i]
}
vul.emis.CF=numeric(20)
vul.emis.CFval=numeric(20)
vul.emis.TF=numeric(20)
vul.emis.TFval=numeric(20)
vul.emis.last=numeric(20)
for(i in 1:20) {
vul.emis.CF[i]=which.max(unlist(vul.emis[213:518,i])) + 213
vul.emis.CFval[i]=vul.emis[vul.emis.CF[i],i]
vul.emis.CF[i]=emis.x[vul.emis.CF[i]]
vul.emis.TF[i]=which.min(unlist(vul.emis[413:523,i])) + 413
vul.emis.TFval[i]=vul.emis[vul.emis.TF[i],i]
vul.emis.TF[i]=emis.x[vul.emis.TF[i]]
vul.emis.last[i]=vul.emis[713,i]
}
refl.CF=numeric(22)
refl.CFval=numeric(22)
refl.TF=numeric(22)
refl.TFval=numeric(22)
refl.last=numeric(22)
for(i in 1:22) {
refl.CF[i]=which.max(unlist(refl[213:518,i])) + 213
refl.CFval[i]=refl[refl.CF[i],i]
refl.CF[i]=refl.x[refl.CF[i]]
refl.TF[i]=which.min(unlist(refl[413:550,i])) + 413
refl.TFval[i]=refl[refl.TF[i],i]
refl.TF[i]=refl.x[refl.TF[i]]
refl.last[i]=refl[714,i]
}
srp.refl.CF=numeric(12)
srp.refl.CFval=numeric(12)
srp.refl.TF=numeric(12)
srp.refl.TFval=numeric(12)
srp.refl.last=numeric(12)
for(i in 1:12) {
srp.refl.CF[i]=which.max(unlist(srp.refl[213:518,i])) + 213
srp.refl.CFval[i]=srp.refl[srp.refl.CF[i],i]
srp.refl.CF[i]=refl.x[srp.refl.CF[i]]
srp.refl.TF[i]=which.min(unlist(srp.refl[413:550,i])) + 413
srp.refl.TFval[i]=srp.refl[srp.refl.TF[i],i]
srp.refl.TF[i]=refl.x[srp.refl.TF[i]]
srp.refl.last[i]=srp.refl[714,i]
}
vul.refl.CF=numeric(10)
vul.refl.CFval=numeric(10)
vul.refl.TF=numeric(10)
vul.refl.TFval=numeric(10)
vul.refl.last=numeric(10)
for(i in 1:10) {
vul.refl.CF[i]=which.max(unlist(vul.refl[213:518,i])) + 213
vul.refl.CFval[i]=vul.refl[vul.refl.CF[i],i]
vul.refl.CF[i]=refl.x[vul.refl.CF[i]]
vul.refl.TF[i]=which.min(unlist(vul.refl[413:550,i])) + 413
vul.refl.TFval[i]=vul.refl[vul.refl.TF[i],i]
vul.refl.TF[i]=refl.x[vul.refl.TF[i]]
vul.refl.last[i]=vul.refl[714,i]
}
temp.emis.srp = c(rep(150,6), rep(300,6), rep(450,6), rep(600,6))
temp.emis.vul = c(rep(150,5), rep(300,5), rep(450,5), rep(600,5))
temp.emis = c(temp.emis.srp, temp.emis.vul)
temp.refl.srp = rep(c(20,500), 6)
temp.refl.vul = rep(c(20,500), 5)
temp.refl = c(temp.refl.srp, temp.refl.vul)
silica.srp = c(72.28, 67.47, 62.64, 57.07, 53.03, 48.03)
silica.vul = c(53.33, 59.66, 64.08, 67.96, 73.96)
silica.srp.emis = rep(silica.srp,4)
silica.vul.emis = rep(silica.vul,4)
silica.srp.refl = c(72.28, 72.28, 67.47, 67.47, 62.64, 62.64, 57.07, 57.07, 53.03, 53.03, 48.03, 48.03)
silica.vul.refl = c(53.33, 53.33, 59.66, 59.66, 64.08, 64.08, 67.96, 67.96, 73.96, 73.96)
silica.emis=c(silica.srp.emis, silica.vul.emis)
silica.refl=c(silica.srp.refl, silica.vul.refl)
alcali.srp = c(7.51, 6.62, 5.72, 4.78, 3.72, 2.71)
alcali.vul = c(8.12, 8.40, 8.47, 8.45, 8.75)
alcali.srp.emis = rep(alcali.srp,4)
alcali.vul.emis = rep(alcali.vul,4)
alcali.srp.refl = c(7.51, 7.51, 6.62, 6.62, 5.72, 5.72, 4.78, 4.78, 3.72, 3.72, 2.71, 2.71)
alcali.vul.refl = c(8.12, 8.12, 8.40, 8.40, 8.47, 8.47, 8.45, 8.45, 8.75, 8.75)
alcali.emis=c(alcali.srp.emis, alcali.vul.emis)
alcali.refl=c(alcali.srp.refl, alcali.vul.refl)
scatterplotMatrix(data.frame(silica.emis,emis.CF,emis.CFval,emis.TF,emis.TFval,emis.der.l2norm))
